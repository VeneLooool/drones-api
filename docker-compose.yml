version: '3.9'

services:
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
  kafka:
    image: bitnami/kafka:3.5
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_PORT}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:${KAFKA_PORT},PLAINTEXT_INTERNAL://:${KAFKA_INTERNAL_PORT}
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKA_HOST}:${KAFKA_PORT},PLAINTEXT_INTERNAL://${KAFKA_INTERNAL_HOST}:${KAFKA_INTERNAL_PORT}
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT_INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    depends_on:
      - kafka
    ports:
      - "${KAFKA_DROP_PORT}:${KAFKA_DROP_PORT}"
    environment:
      KAFKA_BROKER_CONNECT: ${KAFKA_INTERNAL_HOST}:${KAFKA_INTERNAL_PORT}
      JVM_OPTS: "-Xms32M -Xmx64M"

  postgres-drones:
    image: postgres:15
    container_name: postgres-drones
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    command: -p ${POSTGRES_PORT}

  drones-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: drones-api
    restart: on-failure
    depends_on:
      - postgres-drones
      - kafka
    ports:
      - "${DRONE_HTTP_PORT}:${DRONE_HTTP_PORT}"   # HTTP + Swagger
      - "${DRONE_GRPC_PORT}:${DRONE_GRPC_PORT}" # gRPC
    env_file:
      - .env

volumes:
  postgres-data:
